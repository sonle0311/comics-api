// <auto-generated />
using System;
using System.Collections.Generic;
using ComicsApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComicsApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715020422_updateForegnKey")]
    partial class updateForegnKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryManga", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MangasId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "MangasId");

                    b.HasIndex("MangasId");

                    b.ToTable("MangaCategories", (string)null);
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChapterApiData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChapterTitle")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MangaId", "ChapterName")
                        .IsUnique();

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.ChapterImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChapterPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId", "Page")
                        .IsUnique();

                    b.ToTable("ChapterImages");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.ChapterLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChapterApiData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CrawlLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CrawlLogId");

                    b.ToTable("ChapterLogs");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.CrawlLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChaptersCrawledFailed")
                        .HasColumnType("integer");

                    b.Property<int>("ChaptersCrawledSuccess")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CrawledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MangaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MangaSlug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalChapters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MangaSlug");

                    b.ToTable("CrawlLogs");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Manga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Authors")
                        .HasColumnType("jsonb");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("OriginNames")
                        .HasColumnType("jsonb");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SubDocQuyen")
                        .HasColumnType("boolean");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.SeoMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionHead")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MangaId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("OgImage")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OgType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OgUrl")
                        .HasColumnType("text");

                    b.Property<string>("TitleHead")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MangaId")
                        .IsUnique();

                    b.ToTable("SeoMetas");
                });

            modelBuilder.Entity("CategoryManga", b =>
                {
                    b.HasOne("ComicsApi.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicsApi.Domain.Entities.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("ComicsApi.Domain.Entities.Manga", "Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.ChapterImage", b =>
                {
                    b.HasOne("ComicsApi.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Images")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.ChapterLog", b =>
                {
                    b.HasOne("ComicsApi.Domain.Entities.CrawlLog", null)
                        .WithMany("FailedChapters")
                        .HasForeignKey("CrawlLogId");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.SeoMeta", b =>
                {
                    b.HasOne("ComicsApi.Domain.Entities.Manga", null)
                        .WithOne("Seo")
                        .HasForeignKey("ComicsApi.Domain.Entities.SeoMeta", "MangaId");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.CrawlLog", b =>
                {
                    b.Navigation("FailedChapters");
                });

            modelBuilder.Entity("ComicsApi.Domain.Entities.Manga", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Seo");
                });
#pragma warning restore 612, 618
        }
    }
}
